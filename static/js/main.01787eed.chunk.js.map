{"version":3,"sources":["components/empcard/index.js","utils/api.js","components/sort/index.js","components/search/index.js","components/jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","className","src","photo","alt","name","style","maxWidth","firstname","lastname","phone","email","location","axios","get","Sort","id","onChange","sortBy","defaultValue","value","aria-label","Search","searchBy","type","placeholder","Jumbotron","App","state","data","employees","sort","search","handleSort","event","criteria","target","setState","sorted","a","b","localeCompare","console","log","filtered","filter","employee","toLowerCase","includes","API","then","res","results","map","result","first","last","picture","medium","cell","catch","err","this","index","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.01787eed.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Employee(props) {\n\t// console.log(props)\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<img src={props.photo} className=\"card-img-top d-flex mx-auto mt-3\" alt={props.name} style={{maxWidth:\"100px\"}}/>\n\t\t\t<div className=\"card-body\">\n\t\t\t\t<h3 className=\"card-title\">\n\t\t\t\t\t{props.firstname} {props.lastname}\n\t\t\t\t</h3>\n\t\t\t\t<div className=\"card-text\">\n\t\t\t\t\t<p>Phone: {props.phone}</p>\n\t\t\t\t\t<p>Email: {props.email}</p>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"card-footer text-muted\">{props.location}</div>\n\t\t</div>\n\t);\n}\n\nexport default Employee;","import axios from \"axios\";\n\nexport default {\n\tgetEmployees: function () {\n\t\treturn axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n\t},\n};","import React from \"react\";\n// import \"./style.css\";\n\nfunction Sort(props) {\n\treturn (\n\t\t<select\n\t\t\tclassName=\"custom-select\"\n\t\t\tid=\"sortCriteria\"\n\t\t\tonChange={props.sortBy}\n\t\t\tdefaultValue=\"Sort By\"\n\t\t\tvalue={props.value}\n\t\t\taria-label=\"Sort By\">\n\t\t\t<option>Sort By</option>\n\t\t\t<option value=\"first\">First Name</option>\n\t\t\t<option value=\"last\">Last Name</option>\n\t\t\t<option value=\"location\">Location</option>\n\t\t</select>\n\t);\n}\n\nexport default Sort;","  \nimport React from \"react\";\n\nfunction Search(props) {\n\treturn (\n\t\t<input\n\t\t\tonChange={props.searchBy}\n\t\t\tvalue={props.value}\n\t\t\tname=\"search\"\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"form-control\"\n\t\t\tplaceholder=\"Search\"\n\t\t\tid=\"search\"\n\t\t\taria-label=\"Search\"\n\t\t/>\n\t);\n}\n\nexport default Search;","import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron d-flex justify-content-center\">\n      <div>\n      <h1>R-e-A-c-T Co.</h1>\n      <h3>Employee Directory</h3>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport Employee from \"./components/empcard\";\nimport API from \"./utils/api\";\nimport Sort from \"./components/sort\";\nimport Search from \"./components/search\";\nimport Jumb from \"./components/jumbotron\";\n\nclass App extends Component {\n\tstate = {\n\t\tdata: [],\n\t\temployees: [],\n\t\tsort: \"\",\n\t\tsearch: \"\",\n\t};\n\n\t// When this component mounts, get the employee data\n\tcomponentDidMount() {\n\t\tAPI.getEmployees()\n\t\t\t.then((res) => {\n\t\t\t\tconst data = res.data.results.map((result) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfirstname: result.name.first,\n\t\t\t\t\t\tlastname: result.name.last,\n\t\t\t\t\t\tphoto: result.picture.medium,\n\t\t\t\t\t\tphone: result.cell,\n\t\t\t\t\t\temail: result.email,\n\t\t\t\t\t\tlocation: result.location.state,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tthis.setState({ employees: data, data: data });\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\t// sort employee cards by user selected sort criteria\n\thandleSort = (event) => {\n\t\tconst criteria = event.target.value;\n\t\tthis.setState({ sort: criteria });\n\t\tthis.sortBy(criteria);\n\t};\n\n\tsortBy = (criteria, employees = this.state.employees) => {\n\t\t\n\t\tif (criteria === \"first\") {\n\t\t\tconst sorted = employees.sort((a, b) => a.firstname.localeCompare(b.firstname));\n\t\t\tthis.setState({ employees: sorted });\n\t\t} else if (criteria === \"last\") {\n\t\t\tconst sorted = employees.sort((a, b) => a.lastname.localeCompare(b.lastname));\n\t\t\tthis.setState({ employees: sorted });\n\t\t} else if (criteria === \"location\") {\n\t\t\tconst sorted = employees.sort((a, b) => a.location.localeCompare(b.location));\n\t\t\tthis.setState({ employees: sorted });\n\t\t}\n\t\tconsole.log(\"sorted state: \", employees);\n\t};\n\n\t// filter employees by search input\n\tsearchBy = (event) => {\n\t\tconst value = event.target.value;\n\t\tthis.setState({ search: value });\n\t\tconsole.log(\"value: \", value);\n\t\tconst filtered = this.state.data.filter(\n\t\t\t(employee) =>\n\t\t\t\temployee.firstname.toLowerCase().includes(value.toLowerCase()) ||\n\t\t\t\temployee.lastname.toLowerCase().includes(value.toLowerCase()) ||\n\t\t\t\temployee.phone.includes(value) ||\n\t\t\t\temployee.email.toLowerCase().includes(value.toLowerCase()) ||\n\t\t\t\temployee.location.toLowerCase().includes(value.toLowerCase())\n\t\t);\n    console.log(\"filtered: \", filtered);\n    this.setState({ employees: filtered})\n    \n\n    \n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Jumb />\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<form className=\"form-inline d-flex justify-content-between my-3\">\n\t\t\t\t\t\t<Sort search={this.state.sort} sortBy={this.handleSort} />\n\t\t\t\t\t\t<Search search={this.state.search} searchBy={this.searchBy} />\n\t\t\t\t\t</form>\n\t\t\t\t\t<div className=\"card-columns\">\n\t\t\t\t\t\t{this.state.employees.map((employee, index) => (\n\t\t\t\t\t\t\t<Employee\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tfirstname={employee.firstname}\n\t\t\t\t\t\t\t\tlastname={employee.lastname}\n\t\t\t\t\t\t\t\tphoto={employee.photo}\n\t\t\t\t\t\t\t\tphone={employee.phone}\n\t\t\t\t\t\t\t\temail={employee.email}\n\t\t\t\t\t\t\t\tlocation={employee.location}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}